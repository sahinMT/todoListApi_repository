/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.25).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.todo.api;

import java.util.List;

import javax.validation.Valid;

import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import com.todo.model.dto.UserDto;
import com.todo.model.entity.User;

import io.swagger.annotations.ApiParam;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;

@Validated
@RequestMapping(path = "/user", produces = MediaType.APPLICATION_JSON_VALUE)
public interface UsersApi {

	@Operation(summary = "get all users", description = "You can get for all users", tags = { "user" })
	@ApiResponses(value = {
			@ApiResponse(responseCode = "200", description = "Success", content = @Content(array = @ArraySchema(schema = @Schema(implementation = User.class)))),
			@ApiResponse(responseCode = "400", description = "Bad Request", content = @Content(array = @ArraySchema(schema = @Schema(implementation = Error.class)))),
			@ApiResponse(responseCode = "401", description = "Unauthorized", content = @Content(array = @ArraySchema(schema = @Schema(implementation = Error.class)))),
			@ApiResponse(responseCode = "403", description = "Forbidden", content = @Content(array = @ArraySchema(schema = @Schema(implementation = Error.class)))),
			@ApiResponse(responseCode = "404", description = "Not Found", content = @Content(array = @ArraySchema(schema = @Schema(implementation = Error.class)))),
			@ApiResponse(responseCode = "405", description = "Method Not allowed", content = @Content(array = @ArraySchema(schema = @Schema(implementation = Error.class)))),
			@ApiResponse(responseCode = "409", description = "Conflict", content = @Content(array = @ArraySchema(schema = @Schema(implementation = Error.class)))),
			@ApiResponse(responseCode = "500", description = "Internal Server Error", content = @Content(array = @ArraySchema(schema = @Schema(implementation = Error.class)))) })
	@GetMapping("/getUsers")
	ResponseEntity<List<UserDto>> getUsers() throws Exception;

	@Operation(summary = "adds an user", description = "Add an User", tags = { "user" })
	@ApiResponses(value = {
			@ApiResponse(responseCode = "201", description = "User created", content = @Content(array = @ArraySchema(schema = @Schema(implementation = User.class)))),
			@ApiResponse(responseCode = "400", description = "Bad Request", content = @Content(array = @ArraySchema(schema = @Schema(implementation = Error.class)))),
			@ApiResponse(responseCode = "401", description = "Unauthorized", content = @Content(array = @ArraySchema(schema = @Schema(implementation = Error.class)))),
			@ApiResponse(responseCode = "403", description = "Forbidden", content = @Content(array = @ArraySchema(schema = @Schema(implementation = Error.class)))),
			@ApiResponse(responseCode = "404", description = "Not Found", content = @Content(array = @ArraySchema(schema = @Schema(implementation = Error.class)))),
			@ApiResponse(responseCode = "405", description = "Method Not allowed", content = @Content(array = @ArraySchema(schema = @Schema(implementation = Error.class)))),
			@ApiResponse(responseCode = "409", description = "List is already exists", content = @Content(array = @ArraySchema(schema = @Schema(implementation = Error.class)))),
			@ApiResponse(responseCode = "500", description = "Internal Server Error", content = @Content(array = @ArraySchema(schema = @Schema(implementation = Error.class)))) })
	@PostMapping("/addUser")
	ResponseEntity<UserDto> addUser(@ApiParam(value = "List to add") @Valid @RequestBody UserDto user) throws Exception;

	@Operation(summary = "Deletes an user", description = "This operation deletes an user", tags = { "user" })
	@ApiResponses(value = {
			@ApiResponse(responseCode = "204", description = "List Item Deleted", content = @Content(array = @ArraySchema(schema = @Schema(implementation = User.class)))),
			@ApiResponse(responseCode = "400", description = "Bad Request", content = @Content(array = @ArraySchema(schema = @Schema(implementation = Error.class)))),
			@ApiResponse(responseCode = "401", description = "Unauthorized", content = @Content(array = @ArraySchema(schema = @Schema(implementation = Error.class)))),
			@ApiResponse(responseCode = "403", description = "Forbidden", content = @Content(array = @ArraySchema(schema = @Schema(implementation = Error.class)))),
			@ApiResponse(responseCode = "404", description = "Not Found", content = @Content(array = @ArraySchema(schema = @Schema(implementation = Error.class)))),
			@ApiResponse(responseCode = "405", description = "Method Not allowed", content = @Content(array = @ArraySchema(schema = @Schema(implementation = Error.class)))),
			@ApiResponse(responseCode = "409", description = "Ä°tem is already exists", content = @Content(array = @ArraySchema(schema = @Schema(implementation = Error.class)))),
			@ApiResponse(responseCode = "500", description = "Internal Server Error", content = @Content(array = @ArraySchema(schema = @Schema(implementation = Error.class)))) })
	@DeleteMapping("/deleteUser")
	ResponseEntity<String> deleteUser(
			@ApiParam(value = "Identifier of the user") @Valid @RequestParam(value = "username", required = true) String username)
			throws Exception;

}
